from collections import deque

def is_valid_state(state, jug1_capacity, jug2_capacity):
    return (0 <= state[0] <= jug1_capacity) and (0 <= state[1] <= jug2_capacity)

def get_next_states(state, jug1_capacity, jug2_capacity):
    next_states = []

    # Fill jug1
    next_states.append((jug1_capacity, state[1]))

    # Fill jug2
    next_states.append((state[0], jug2_capacity))

    # Empty jug1
    next_states.append((0, state[1]))

    # Empty jug2
    next_states.append((state[0], 0))

    # Pour water from jug1 to jug2
    pour = min(state[0], jug2_capacity - state[1])
    next_states.append((state[0] - pour, state[1] + pour))

    # Pour water from jug2 to jug1
    pour = min(state[1], jug1_capacity - state[0])
    next_states.append((state[0] + pour, state[1] - pour))

    return [state for state in next_states if is_valid_state(state, jug1_capacity, jug2_capacity)]

def solve_water_jug(jug1_capacity, jug2_capacity, target):
    start_state = (0, 0)
    queue = deque([(start_state, [])])
    visited = set()

    while queue:
        current_state, path = queue.popleft()
        if current_state in visited:
            continue

        visited.add(current_state)
        path.append(current_state)

        if current_state[0] == target or current_state[1] == target:
            return path

        for next_state in get_next_states(current_state, jug1_capacity, jug2_capacity):
            if next_state not in visited:
                queue.append((next_state, path.copy()))

    return None

def print_solution(solution):
    if solution:
        for step in solution:
            print(f"Jug1: {step[0]} liters, Jug2: {step[1]} liters")
    else:
        print("No solution found")

# Example usage
jug1_capacity = 4
jug2_capacity = 3
target = 2

solution = solve_water_jug(jug1_capacity, jug2_capacity, target)
print_solution(solution)
