import heapq

class PuzzleState:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous

    def __lt__(self, other):
        return self.priority() < other.priority()

    def priority(self):
        return self.moves + self.manhattan()

    def manhattan(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    x, y = divmod(self.board[i][j] - 1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance

    def is_goal(self):
        goal = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        return self.board == goal

    def neighbors(self):
        neighbors = []
        x, y = next((i, j) for i in range(3) for j in range(3) if self.board[i][j] == 0)

        def swap_and_create_board(dx, dy):
            new_board = [row[:] for row in self.board]
            new_board[x][y], new_board[x + dx][y + dy] = new_board[x + dx][y + dy], new_board[x][y]
            return PuzzleState(new_board, self.moves + 1, self)

        if x > 0:
            neighbors.append(swap_and_create_board(-1, 0))
        if x < 2:
            neighbors.append(swap_and_create_board(1, 0))
        if y > 0:
            neighbors.append(swap_and_create_board(0, -1))
        if y < 2:
            neighbors.append(swap_and_create_board(0, 1))

        return neighbors

def solve_puzzle(initial_board):
    initial_state = PuzzleState(initial_board)
    if initial_state.is_goal():
        return initial_state

    frontier = []
    heapq.heappush(frontier, initial_state)
    explored = set()

    while frontier:
        current_state = heapq.heappop(frontier)
        if current_state.is_goal():
            return current_state

        explored.add(tuple(map(tuple, current_state.board)))

        for neighbor in current_state.neighbors():
            if tuple(map(tuple, neighbor.board)) not in explored:
                heapq.heappush(frontier, neighbor)

    return None

def print_solution(state):
    path = []
    while state:
        path.append(state.board)
        state = state.previous
    path.reverse()

    for step in path:
        for row in step:
            print(row)
        print()

# Example usage
initial_board = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]

solution = solve_puzzle(initial_board)
if solution:
    print_solution(solution)
else:
    print("No solution found.")
